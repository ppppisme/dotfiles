
Module
======
A Drupal module is a collection of files containing some functionality and is
written in PHP. Because the module code executes within the context of the site,
it can use all the functions and access all variables and structures of
Drupal core. In fact, a module is no different from a regular PHP file
that can be independently created and tested and then used to drive
multiple functionalities.



Structure
=========
modulename.module - only hooks
modulename.info
modulename.module
includes/
includes/pages
theme/
theme/js
theme/css



Preparing
=========
1. Name your module - lowercase, letters and underscores
2. Create module
	1. Create folder: `sites/all/modules/$modulename`
	2. Create a PHP file: `sites/all/modules/$modulename/$modulename.md`
	3. Add an opening PHP tag to module: `<?php` (but don't close it with ` ?>`, because it can cause runtime issues on certain servers)



Tell drupal about your module
=============================
All modules must have `$modulename.info` file for meta information about the
module.

The general format is:

	name = Module Name
	description = A description of what your module does.
	core = 7.x


Details: [https://www.drupal.org/node/542202](https://www.drupal.org/node/542202)



Comments
========
Drupal uses Doxygen to draw documentation from source code. [More details about
Oxygen comments](https://www.drupal.org/node/1354).

First comment:

`
/**
 * @file
 * A block module that displays recent blog and forum posts.
 */
`



Hooks
=====
Hooks allow to integrate module into drupal core. Hooks occur at various points
in the thread of execution, where Drupal seeks contributions from all the
enabled modules.

Hook example:

	modulename_help($path, $arg) {}

* [More details](https://www.drupal.org/node/292) about hooks
* [Even more details](http://alanstorm.com/drupal_module_hooks)
* [List](https://api.drupal.org/api/drupal/includes%21module.inc/group/hooks/7.x) of possible core hooks


_Tip:_ Include `hook_help($patg, $arg)` in every module.
[Help](https://www.drupal.org/node/632280) with help.

The `$path` parameter provides context for the help: where in Drupal or the
module the user is when they are accessing help. The recommended way to process
this variable is with a switch statement.

	/**
	\* Implements hook_help().
	\*
	\* Displays help and module information.
	\*
	\* @param path 
	\*   Which path of the site we're using to display help
	\* @param arg 
	\*   Array that holds the current path as returned from arg() function
	\*/
	function modulename_help($path, $arg) {
	switch ($path) {
		case "admin/help#modulename":
			return '' . t("Help text") . '';
			break;
		}
	}

The t() function that wraps the text marks it for translation. This function not
only allows for translation, it can give your code an added layer of security.


Where can I find hook description
=========================
`drupal/modules/system`


Debug
=====
devel, xdebug

But best of all: `debug($data)`
